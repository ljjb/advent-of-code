(* open Core *)
(* open Stdio *)
(**)
(* let part2 filename = *)
(*   let matrix = read_puzzle filename in *)
(*   let nrows = Array.length matrix in *)
(*   let ncols = Array.length matrix.(0) in *)
(*   let find_num i j = *)
(*     let rec expand_left j = *)
(*       let jm1 = j - 1 in *)
(*       if jm1 < 0 *)
(*       then 0 *)
(*       else if not @@ Char.is_digit matrix.(i).(jm1) *)
(*       then j *)
(*       else expand_left (j - 1) *)
(*       (* if j <= 0 then 0 else if not @@ Char.is_digit matrix.(i).(j - 1) then j else expand_left (j - 1) *) *)
(*     in *)
(*     let rec expand_right j = *)
(*       let jp1 = j + 1 in *)
(*       if jp1 >= ncols *)
(*       then ncols - 1 *)
(*       else if not @@ Char.is_digit matrix.(i).(jp1) *)
(*       then j *)
(*       else expand_right (j + 1) *)
(*     in *)
(*     if Char.is_digit matrix.(i).(j) then Some (expand_left j, expand_right j) else None *)
(*   in *)
(*   let nbors (i, j) = *)
(*     [ -1, -1; 0, -1; 1, -1; -1, 0; 1, 0; -1, 1; 0, 1; 1, 1 ] *)
(*     |> Sequence.of_list *)
(*     |> Sequence.map ~f:(fun (di, dj) -> i + di, j + dj) *)
(*     |> Sequence.filter_map ~f:(fun (i, j) -> *)
(*       if i >= 0 && i < nrows && j >= 0 && j < ncols then Some (i, j) else None) *)
(*   in *)
(*   let explored = Hashtbl.create (module Int_duple) in *)
(*   let explored_local = Hash_set.create (module Int_duple) in *)
(*   let idxs = *)
(*     Array.mapi matrix ~f:(fun i row -> *)
(*       Array.filter_mapi row ~f:(fun j _ -> *)
(*         if is_symbol row.(j) then Some (i, j) else None) *)
(*       |> Array.to_sequence) *)
(*     |> Array.to_sequence *)
(*     |> Sequence.concat *)
(*   in *)
(*   idxs *)
(*   |> Sequence.map ~f:(fun (i, j) -> *)
(*     Hash_set.clear explored_local; *)
(*     nbors (i, j) *)
(*     |> Sequence.filter_map ~f:(fun (i, j) -> *)
(*       match find_num i j with *)
(*       | None -> None *)
(*       | Some (lo, hi) -> *)
(*         if Hash_set.mem explored_local (i, lo) *)
(*         then None *)
(*         else ( *)
(*           ignore @@ Hash_set.add explored_local (i, lo); *)
(*           Hashtbl.update explored (i, lo) ~f:(function *)
(*             | Some x -> x + 1 *)
(*             | None -> 1); *)
(*           let sublen = hi - lo + 1 in *)
(*           let subrow = Array.sub matrix.(i) ~pos:lo ~len:sublen |> String.of_array in *)
(*           printf !"Adding %{sexp:(Int.t * Int.t)} value %{sexp:String.t}\n" (i, lo) subrow; *)
(*           Some ((i, lo), int_of_string subrow)))) *)
(*   |> Sequence.concat *)
(*   |> Sequence.to_list *)
(*   |> List.filter_map ~f:(fun ((i, lo), num) -> *)
(*     match Hashtbl.find explored (i, lo) with *)
(*     | Some 2 -> Some num *)
(*     | _ -> None) *)
(*   |> List.sum (module Int) ~f:Util.id *)
(* ;; *)
